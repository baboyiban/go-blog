services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # ports:
    #   - "8080:8080" # 필요하면 이 포트는 내부에서만 사용하도록 제거
    environment:
      - GIN_MODE=release
      - DB_HOST=mysql
      - DB_USER=gouser
      - DB_PASSWORD=gopassword
      - DB_NAME=goblog
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # ports:  # 필요하면 이 포트는 내부에서만 사용하도록 제거
    #   - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=/api
    restart: unless-stopped

  mysql:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: goblog
      MYSQL_USER: gouser
      MYSQL_PASSWORD: gopassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certbot-www:/var/www/certbot # Certbot 인증 파일 저장
      - certbot-conf:/etc/letsencrypt # 인증서 저장
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-www:/var/www/certbot
      - certbot-conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 24h & wait $${!}; done;'" # Certbot 인증서 갱신; 12시간 마다 갱신
    restart: unless-stopped

volumes:
  mysql_data:
