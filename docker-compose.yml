version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: frontend/Dockerfile
      args:
        DOMAIN: ${DOMAIN}
    container_name: go-blog-backend
    expose:
      - "8080"
    environment:
      - GIN_MODE=release
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    networks:
      - go-blog-network
    depends_on:
      - mysql

  frontend:
    build:
      context: ./frontend
      dockerfile: frontend/Dockerfile
    container_name: go-blog-frontend
    expose:
      - "3000"
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    networks:
      - go-blog-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  mysql:
    build: ./mysql
    container_name: go-blog-mysql
    expose:
      - "3306"
    env_file:
      - .env
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - go-blog-network

  traefik:
    image: traefik:v2.10
    container_name: go-blog-traefik
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}" # .env 파일의 EMAIL 변수 사용
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    networks:
      - go-blog-network

volumes:
  mysql-data:
    driver: local
  letsencrypt:
    driver: local

networks:
  go-blog-network:
    driver: bridge
